openapi: 3.1.0
info:
  title: Majedah Matar - GreenPlants 
  description: |-
    Welcome to GreenPlant â€“ Your One- Stop Destination for Interior Plants and Decor. 

    At GreenPlant, we are dedicated to providing you with a premium selection of high-quality indoor plants and home decor items. Whether you're an interior design enthusiast, homeowner, or office manager  we have something special for you.

    Key Features:
     - Explore a wide range of Natural Plants, Plant Accessories, and Artificial Plants to elevate your space.
     - Expert care tips and advice for plant enthusiasts.
     - Eco-friendly and sustainable practices in our products.

  version: 1.0.11
  contact: 
    email: ijood77@gmail.com

  
servers:
  - url: http://localhost:3000
  - url: http://localhost:3001
tags:
  - name: products
    description: Everything about GreenPlant products
  - name: orders
    description: Access to GreenPlant orders
  - name: users
    description: Operations about user
  - name: categories
    description: Operations about categories
paths:
  /products:
    get:
      tags:
        - products
      summary: retrieving  a list of all products
      description: returning all the products 
      operationId: listProducts
      parameters: 
        - in: query
          name: page
          schema: 
            type: number 
          required: false
        - in: query
          name: limit
          schema: 
            type: number 
          required: false
        - in: query
          name: sortByPrice
          schema: 
            type: string 
            enum:
              - 'lowToHigh'
              - 'highToLow'
          required: false
                   
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array 
                items: 
                     $ref: '#/components/schemas/Product'
    post:
      tags:
        - products
      summary: create a product
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Product'              
      responses:
        '201':
          description: create a product
          content:
            application/json:
              schema:
                type: array 
                items: 
                     $ref: '#/components/schemas/Product'
        '500':
          description: server error
  /products/{id}: 
    get: 
      tags: 
        - products 
      summary: retrieving product by id 
      description: displying product details by product id 
      operationId: getProductId
      parameters: 
        - in: path 
          name: productID
          required: true 
          schema: 
            type: string
          
      responses: 
        '200': 
          description: list product details 
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Product'
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    delete: 
      tags: 
        - products 
      summary: delete product by id 
      description: delete a single product by its id 
      operationId: deleteProductId
      parameters: 
        - in: path 
          name: productID
          required: true 
          schema: 
            type: string
          
      responses: 
        '200': 
          description: delete product by id 
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
    put: 
      tags: 
        - products 
      summary: update product by id 
      description: update product details by product id 
      operationId: updateProductId
      parameters: 
        - in: path 
          name: productID
          required: true 
          schema: 
            type: string
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Product'
      responses: 
        '200': 
          description: update product details 
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Product'
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
  /products/searchKeyword:
    get:
      tags: 
        - products
      summary: search products
      parameters: 
        - in: path 
          name: searchkeyword
          required: true 
          schema: 
            type: string
      responses: 
        '200': 
          description: search products by name 
          content: 
            application/json: 
              schema: 
                type: array 
                items: 
                  $ref: '#/components/schemas/Product'                
        '500': 
          description: server error 
        '404':
          description: Products are not found





  /users:
    get:
      tags:
        - users
      summary: retrieving  a list of all users
      description: returning all the users            
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array 
                items: 
                     $ref: '#/components/schemas/User'
    post:
      tags:
        - users
      summary: create a user
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/User'              
      responses:
        '201':
          description: create a user
          content:
            application/json:
              schema:
                type: array 
                items: 
                     $ref: '#/components/schemas/User'
        '500':
          description: server error
  /users/{id}: 
    get: 
      tags: 
        - users 
      summary: retrieving user by id 
      description: displying user details by user id 
      parameters: 
        - in: path 
          name: userID
          required: true 
          schema: 
            type: string
          
      responses: 
        '200': 
          description: find user by id 
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/User'
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: user not found
    delete: 
      tags: 
        - users 
      summary: delete user by id 
      description: delete a single user by its id 
      parameters: 
        - in: path 
          name: userID
          required: true 
          schema: 
            type: string
          
      responses: 
        '200': 
          description: delete user by id 
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: user not found
    put: 
      tags: 
        - users 
      summary: update user by id 
      description: update user details by user id 
      parameters: 
        - in: path 
          name: userID
          required: true 
          schema: 
            type: string
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/User'
      responses: 
        '200': 
          description: update user details 
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/User'
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: user not found
  /categories:
    get:
      tags:
        - categories
      summary: retrieving  a list of all categories
      description: returning all the categories            
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array 
                items: 
                     $ref: '#/components/schemas/Category'
    post:
      tags:
        - categories
      summary: create a category
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Category'              
      responses:
        '201':
          description: create a category
          content:
            application/json:
              schema:
                type: array 
                items: 
                     $ref: '#/components/schemas/Category'
        '500':
          description: server error
  /categories/{id}: 
    get: 
      tags: 
        - categories 
      summary: retrieving category by id 
      parameters: 
        - in: path 
          name: categoryID
          required: true 
          schema: 
            type: string
          
      responses: 
        '200': 
          description: find category by id 
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Category'
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: category not found
    delete: 
      tags: 
        - categories 
      summary: delete category by id 
      description: delete a single category by its id 
      parameters: 
        - in: path 
          name: categoryID
          required: true 
          schema: 
            type: string
          
      responses: 
        '200': 
          description: delete category by id 
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: category not found
    put: 
      tags: 
        - categories 
      summary: update category by id 
      parameters: 
        - in: path 
          name: categoryID
          required: true 
          schema: 
            type: string
      requestBody: 
        content: 
          application/json: 
            schema: 
              $ref: '#/components/schemas/Category'
      responses: 
        '200': 
          description: update category details 
          content: 
            application/json: 
              schema: 
                $ref: '#/components/schemas/Category'
        '500': 
          description: server error 
        '400':
          description: Invalid ID supplied
        '404':
          description: category not found

components:
  schemas:
    Product:
      type: object
      properties: 
        id: 
          type: integer
          format: int64
          examples: [10]
        name:
          type: string
          examples: [Emerald]
        subName: 
          type: string
          examples: [greenPlant]
        image: 
          type: string 
          examples: [public/images/productImagethree.png]
        description: 
          type: string
          examples: [greenPlant]
        categories:
          type: array 
          items:
            $ref: '#/components/schemas/Category'
        variants:
          type: array
          items:
            type: string
          examples: ["Cosmic Veil", "Astral Elegance"]
        sizes:
          type: array
          items:
            type: string
          examples: ["Mini", "Medium", "Grand"]  
        price: 
          type: integer
          format: int64
          examples: [10]         
        quantity: 
          type: integer
          format: int64
          examples: [10]        
      required:
        - name
        - image
        - price
      examples: 
        - id: 1
          name: GreenPlant
          subName: white Accessories
          categories: [1]
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        productId:
          type: integer
          format: int64
          examples: [198772]
        userId:
          type: integer
          format: int32
          examples: [7]
        purchasedAt:
          type: string
          format: date-time

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        name:
          type: string
          examples: [Accessories]

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        firstName:
          type: string
          examples: [John]
        lastName:
          type: string
          examples: [James]
        email:
          type: string
          examples: [john@email.com]
        password:
          type: string
          examples: ['12345']


